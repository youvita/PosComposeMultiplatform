
CREATE TABLE MenuEntity (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    menuName TEXT,
    menuImage BLOB
);

insertMenu:
INSERT INTO MenuEntity(menuName, menuImage) VALUES(?, ?);

updateMenu:
UPDATE MenuEntity SET menuName = ?, menuImage = ? WHERE id = ?;

deleteMenu:
DELETE FROM MenuEntity WHERE id = ?;

getAllMenu:
SELECT * FROM MenuEntity;


CREATE TABLE StockEntity (
    stock_id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    product_id INTEGER,
    stock_in INTEGER,
    stock_out INTEGER,
    stock_box INTEGER,
    total INTEGER,
    date_in TEXT,
    date_out TEXT
);

insertStock:
INSERT INTO StockEntity(product_id, stock_in, stock_out, stock_box, total, date_in, date_out) VALUES(?, ?, ?, ?, ?, ?, ?);

updateStock:
UPDATE StockEntity SET product_id = ?, stock_in = ?, stock_out = ?, stock_box = ?, total = ?, date_in = ?, date_out = ? WHERE stock_id = ?;

getStockByProductId:
SELECT * FROM StockEntity WHERE product_id = ?;

getProductStock:
SELECT * FROM StockEntity JOIN ProductEntity ON StockEntity.product_id = ProductEntity.product_id GROUP BY StockEntity.product_id ORDER BY stock_id ASC;

CREATE TABLE ProductEntity (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    menu_id INTEGER,
    product_id INTEGER,
    name TEXT,
    image BLOB,
    imageUrl TEXT,
    qty TEXT,
    price TEXT,
    discount TEXT
);


insertProduct:
INSERT INTO ProductEntity(menu_id,product_id, name, image, imageUrl, qty, price, discount) VALUES(?,?,?, ?, ?,?, ?, ?);

getProductByMenuId:
SELECT * FROM ProductEntity JOIN MenuEntity ON ProductEntity.menu_id = MenuEntity.id WHERE menu_id = ? GROUP BY ProductEntity.menu_id;

getAllProduct:
-- SELECT * FROM ProductEntity JOIN MenuEntity ON ProductEntity.menu_id = MenuEntity.id GROUP BY ProductEntity.menu_id;
SELECT * FROM ProductEntity JOIN MenuEntity;

CREATE TABLE OrderEntity (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    order_no TEXT,
    queue_no TEXT,
    date TEXT ,
    total_item TEXT,
    total_qty TEXT,
    sub_total TEXT,
    discount TEXT,
    vat TEXT,
    total TEXT,
    status TEXT
);

insertOrderHistory:
INSERT INTO OrderEntity(
order_no,
queue_no,
date,
total_item,
total_qty,
sub_total,
discount,
vat,
total,
status
) VALUES (?,?,?,?,?,?,?,?,?,?);

getAllOrderHistory:
SELECT * FROM OrderEntity;

getOrderHistoryPaging:
SELECT * FROM OrderEntity LIMIT ? OFFSET ?;

-- SQL query for INNER JOIN
SELECT
    OrderEntity.order_no,
    OrderEntity.queue_no,
    OrderEntity.date,
    OrderEntity.total_item,
    OrderEntity.total_qty,
    OrderEntity.sub_total,
    OrderEntity.discount,
    OrderEntity.vat,
    OrderEntity.total,
    OrderEntity.status,
    ProductOrderEntity.product_id AS product_code,
    ProductOrderEntity.name,
    ProductOrderEntity.image,
    ProductOrderEntity.imageUrl,
    ProductOrderEntity.qty,
    ProductOrderEntity.price,
    ProductOrderEntity.discount
FROM
    OrderEntity
INNER JOIN
    ProductOrderEntity
ON
    OrderEntity.id = ProductOrderEntity.order_id
WHERE
    OrderEntity.id = ?;

CREATE TABLE ProductOrderEntity (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    product_id INTEGER, -- product code
    order_id INTEGER,
    name TEXT,
    image BLOB,
    imageUrl TEXT,
    qty INTEGER,
    price INTEGER,
    discount INTEGER
);

insertProductOrder:
INSERT INTO ProductOrderEntity(product_id,order_id, name, image,qty, price, discount)
VALUES(?,?, ?, ?,?, ?, ?);
